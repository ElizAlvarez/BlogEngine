// <auto-generated />
using System;
using BlogEngine.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlogEngine.Data.Migrations
{
    [DbContext(typeof(BlogEngineContext))]
    partial class BlogEngineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlogEngine.Core.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsByEditor")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", "dbo");
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.ToTable("Post", "dbo");
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.PostStatus", b =>
                {
                    b.Property<int>("PostStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostStatusId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostStatusId");

                    b.ToTable("PostStatus", "dbo");

                    b.HasData(
                        new
                        {
                            PostStatusId = 1,
                            Name = "Created"
                        },
                        new
                        {
                            PostStatusId = 2,
                            Name = "Pending"
                        },
                        new
                        {
                            PostStatusId = 3,
                            Name = "Published"
                        });
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", "dbo");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Public"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Writer"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User", "dbo");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "nubem@gmail.com",
                            LastName = "Mejia",
                            Name = "Nube",
                            RoleId = 1,
                            UserName = "NubeM"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "Juand@gmail.com",
                            LastName = "Ojeda",
                            Name = "Juan",
                            RoleId = 2,
                            UserName = "JuanD"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "rayitoc@gmail.com",
                            LastName = "Castro",
                            Name = "Rayuela",
                            RoleId = 3,
                            UserName = "RayoC"
                        });
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.Comment", b =>
                {
                    b.HasOne("BlogEngine.Core.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("CommentId");

                    b.HasOne("BlogEngine.Core.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.Post", b =>
                {
                    b.HasOne("BlogEngine.Core.Entities.PostStatus", "PostStatus")
                        .WithMany("Post")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlogEngine.Core.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.User", b =>
                {
                    b.HasOne("BlogEngine.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.PostStatus", b =>
                {
                    b.Navigation("Post");
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BlogEngine.Core.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
